it is possible that I don't need NType class, I'd have to make GenerateSerialNumber method not abstract and make the same methods in subclasses not overwrite

set up hazard notifications system with listener (multithreading or event handling)

notifyhazard method in LType is infinite loop

change the weight variable to mass in products
also change max weight variable to capacity in containers

switch case for product loading? with generic type args

I see that creating additional product subclasses isn't optimal. Delete them

    /*
     * ADDITIONAL INFO
     * There are special containers that have a specified type of cargo they can hold:
     * Liquid container:
     *  - L type in serial number (e.g. KON-L-1)                                                                                                             ==DONE==
     *  - Allow liquid transportation
     *      - two types of liquids: hazardous (e.g. fuel), normal (e.g. milk)                                                                                ==DONE==
     *  - Implements interface IHazardNotifier which allows sending text notification in case of dangerous situation and includes container serial number    ==DONE==
     *  - When running loading method we should check:
     *      - if the container's holding hazardous cargo, we can only fill 50% of total capacity                                                             ==DONE==   
     *      - otherwise we can fill 90% of total capacity                                                                                                    ==DONE==
     *      - push notification about dangerous user action if user tries to fill more than permitted by these rules                                         ==DONE==
     * Gas container:
     *  - G type in serial number                                                                                                                            ==DONE==
     *  - Holds additional info about atmospheric pressure inside the container                                                                              ==90%==
     *  - While unloading this container 5% of its cargo is left inside                                                                                      ==DONE==
     *  - Implements interface IHazardNotifier which allows sending text notification in case of dangerous situation and includes container serial number    ==DONE==
     *  - if cargo mass is greater than container capacity we should throw an exception                                                                      ==DONE==
     * Refrigerated container:
     *  - C type in serial number                                                                                                                            ==DONE==
     *  - Holds additional info: 
     *      - cargo type that can be stored in the specified container                                                                                       ==I GUESS==
     *      - temperature inside the container                                                                                                               ==DONE==
     *  - The container can only hold one type of cargo                                                                                                      ==DONE==
     *  - Temperature inside the container cannot be lower than minimum storing temperature required by specified cargo type                                 ==TEMP CANT BE HIGHER==
     * 
     * Product/Temperature chart:
     *  Bananas: 13,3
     *  Chocolate: 18
     *  Fish: 2
     *  Meat: -15
     *  Ice cream: -18
     *  Frozen pizza: -30
     *  Cheese: 7,2
     *  Sausages: 5
     *  Butter: 20,5
     *  Eggs: 19
     *  
     * ADDITIONAL INFO 2
     * My structure implementation requires that I add also normal type containers (N type in serial number)
     *  - because it is my own class, not specified by the requirements, there are no rules besides the weight capacity
     */

                                 /*
                                 * Cargo mass (kg)
                                 * Height (cm)
                                 * Weight (kg)
                                 * Depth (cm)
                                 * Width (cm)
                                 * Serial number
                                 *      - number format: KON-C-1
                                 *      - first part is always KON
                                 *      - second part is container type
                                 *      - third part is ID, generated by system
                                 * Maximum capacity (kg)
                                 */
                                /*
                                 * Creating a container
                                 * Cargo unloading
                                 * Cargo loading with specified amount of product
                                 *      - if the product weight is greater than container capacity we should throw OverfillException
                                 * Printing info about container
                                 */